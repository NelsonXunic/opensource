<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_docu_involvement" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Documentation as Involvement</title>
  <introduction>



  </introduction>

		<subsection xml:id="sub-sec-how-documentation-suffers">
			<title>How Documentation Suffers</title>
			<p>
				Getting set up to contribute to an open source project ranges from being technically fairly easy to requiring a long series of steps including many interconnected software installations and several interconnected codebases. 
			</p>

			<p>
				Repairing or improving documentation has a reputation as being an easy way to begin contributing to a project. Newcomers can often make improvements to the documentation for such things as how to get a thing to run/compile because they will be going through that process and might run into an issue or outdated part of documentation. They are then in a great position to improve it based on their experience.
			</p>

			<p>
				When developers resist documenting, it is usually around several themes:
			</p>

			<p><ol>

				<li>
				Developers often don't like technical writing for think that writing is not a principal skill.
				</li>


				<li>
				 Developers want to get on with new engineering problems instead. In OSS, developers are volunteers and writing documentation takes up more of their free time.
				</li>
				<li>
				For commercial projects, priorities may be on releasing new features and there may be little to no time to write documentation as it is not viewed by management as valuable.
				</li>



			</ol></p>

			<p>
				The techniques for creating an OSS community that attracts contributions from project developers are mirrored answers to the above-mentioned problems.
			</p>


			<p>
				Dumping down words in to a text editor is not very hard; many developers write copiously in email, for example. The documentor’s challenge is finding this content wherever it is (mailing lists, IRC discussions, random wiki pages) and editing it in to something comprehensive that reveals content holes for filling. The documentation project’s success hinges on the ability to restructure rambling content and make all of that accessible to new writing contributors, so they can begin meaningful work from the very start.
			</p>

			<p>
				A metric of this success is when any random experienced contributor is asked a question by a new contributor, and in answering, insists that the answer be documented, for example, on the project wiki using existing templates, etc. In this way new contributors are turned in to documentors who share the work burden from the existing contributors.
			</p>

					
		</subsection>

			<subsection xml:id="subsec-steps-to">
				<title>Getting Involved Through Documentation</title>
				<p>
					Once you have identified an OSS project with an active and welcoming community, what steps should you take to become involved? Communication is the key to a healthy community, so here are some steps you can take to begin:
					<ol>
						<li>
							<p>
								The first step is to learn to use the software. For web-based applications, this is often trivial. We all know how to use the Firefox browser, for example. For software that requires installation, you will likely follow directions on the website or in an INSTALL file from the repo. If needed, check out the examples and tutorials. Seeing an example of how the software works will help your understanding of the overall project.    
							</p>
						</li>
						<li>
							<title>Asynchronous Communication Channels</title>
							<p>
								Familiarize yourself with the communication channels employed by the community. If they have a Discord or Slack Channel, Google Group or other mailing list, sign up and read through other recent posts there. If this is a community, you want to stay engaged with, turn on notifications for some of the most relevant channels.
							</p>
						</li>
						
						<li>
							<p>
								Starting with the README, CONTRIBUTING, and CODE_OF_CONDUCT, read the documentation that seems most relevant to your goals. 
							</p>
						</li>

						<li>
							<title>Following the Documentation</title>
							<p>
								Because opening issues about unclear, incorrect, or out-of-date documentation is an excellent place to begin contributing, if you want to start contributing, follow the documentation very slowly and deliberately, taking note of places where you experience confusion. 
							</p>
						</li>
						<li>
							<title>Synchronous Communication</title>
			
							<p>
								Some groups also have IRC and/or drop in video conferences that are open to all. Once you have a sense of the community, you can drop into these which will help you to become more integrated into the community.
							</p>
						</li>
						<li>
							<p>
								Once you have something you want to contribute to the community, with the goal of setting up your development environment (see <xref ref="ch_dev_env"/>),  slowly and deliberately follow the directions provided by the community to set up your development environment. Here again, take note of places where you experience confusion. 
							</p>
						</li>
						<li>
							<title>Open an Issue</title>
							
							<p>
								Once you have identified a place that documentation is confusing, wrong, etc, you are ready to open an issue. In opening an issue, most projects will have a standard format that you will want to be sure to follow.
							</p>
							<p>
								
							</p>
						</li>

					</ol>
				</p>

		


			<exercise xml:id="exercise-getting-involved">
				<title>Exercise: Getting involved</title>

				<p>
          <ol>
            <li>
              <p>
                 Take a technical document content plan and prepare it to show to developers.
              </p>
           
            <ul>
              <li>
              For example, create a personal user namespace on an open source project’s wiki “User:Username/New_page”.
              </li>

              <li>
              Alternately, prepare it for inclusion in email.
              </li>
				    </ul>
					</li>

					<li>
					Join the documentation mailing list; if there is no specific documentation list, join the main developer list.
					</li>

					<li>
					Send an email with your content plan and any work done so far, request comments on content and where you are getting information from.
					</li>

					<li>
					Proceed with writing a first draft of the content based on your plan and comments received.
					</li>

					<li>
					If you get stuck, return to the mailing list or ask on their preferred communication channel. Your earlier introduction and content plan makes this part easier.
					</li>

					<li>
					Return with your next draft to the mailing list, asking for a review and comments. Provide enough time, several days to a week, and be sure to engage in discussion about the content in a timely way (at least once per day.) The goal of this step is to improve the content’s accuracy.
					</li>

				</ol>
        </p>

			</exercise>
		</subsection>
		
		<exercise label = "docuInvolvement" numbered = "yes" language = "natural" adaptive = "yes">
			<statement>
				<p>
					Arrange some of the steps below in the correct order that a newcomer should take to become involved in an open-source project through documentation:
				</p>
			</statement>
			<blocks>
				<block order="1">
					<cline>
					  Learn to use the software
					</cline>
				</block>
				<block order="2">
					<cline>
					  Join asynchronous communication channels.
					</cline>
				</block>
				<block order="3">
					<cline>
						Start with the README, CONTRIBUTING files, and CODE_OF_CONDUCT
					</cline>
				</block>
				<block order="4">
					<cline>
						Follow the documentation slowly
					</cline>
				</block>
				<block order ="5">
					<cline>
						Join synchronous communication channels
					</cline>
				</block>
				<block order="6">
				  <cline>
					Set up the development environment
				  </cline>
				</block>
				<block order="7">
				  <cline>
					Identify the confusing parts of the documentation and suggest improvements
				  </cline>
				</block>
				<block correct="no">
					<cline>
						Request a meeting with existing contributors to understand more about the project
					</cline>
				</block>
				<block correct="no">
					<cline>
						Ask questions in the community channels
					</cline>
				</block>
			</blocks>
		  </exercise>
</section>

